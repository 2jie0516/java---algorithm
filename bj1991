import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;


public class Main {
    static Node node = new Node('A',null,null);

    static class Node{
        char value;
        Node right;
        Node left;

        public Node(char value, Node right, Node left) {
            this.value = value;
            this.right = right;
            this.left = left;
        }
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int num = Integer.parseInt(br.readLine());

        for(int i=0;i<num;i++){
            StringTokenizer st = new StringTokenizer(br.readLine());

            char root = st.nextToken().charAt(0);
            char left = st.nextToken().charAt(0);
            char right = st.nextToken().charAt(0);

            InsertNode(node,root,left,right);
        }

        preSearch(node);
        System.out.println();
        inSearch(node);
        System.out.println();
        postSearch(node);

    }

    private static void postSearch(Node node) {
        if(node == null) return;
        preSearch(node.left);
        preSearch(node.right);
        System.out.print(node.value);
    }

    private static void inSearch(Node node) {
        if(node == null) return;
        preSearch(node.left);
        System.out.print(node.value);
        preSearch(node.right);

    }

    private static void preSearch(Node node) {
        if(node == null) return;
        System.out.print(node.value);
        preSearch(node.left);
        preSearch(node.right);

    }

    static void InsertNode(Node node, char root, char left, char right) {
        if(node.value == root){
            node.left = (left == '.' ? null : new Node(left,null,null));
            node.right = (right == '.' ? null : new Node(right,null,null));
        }

        else{
            if(node.left != null) InsertNode(node.left,root,left,right);
            if(node.right != null) InsertNode(node.right,root,left,right);
        }
    }




}
