import java.util.*;

class Solution {
    static int min = Integer.MAX_VALUE;
    static int[] x_move = {1,-1,0,0};
    static int[] y_move = {0,0,1,-1};
    static int[][] visit;
    static int x_idx;
    static int y_idx;
    
    static class Node{
        int x;
        int y;
        
        public Node(int x,int y){
            this.x = x;
            this.y = y;
        }
    }
    
    public int solution(int[][] maps) {
        int answer = 0;
        x_idx = maps.length -1;
        y_idx = maps[0].length -1;
        visit = new int[x_idx+1][y_idx+1];
        
        bfs(0,0,maps);
        answer = visit[x_idx][y_idx];
        if(answer == 0) return -1;
        return answer;
    }
    
    static void bfs(int x,int y,int[][] maps){
        Queue<Node> q = new LinkedList<>();
        visit[x][y] = 1; 
        q.add(new Node(x,y));
        while(!q.isEmpty()){
            Node node = q.poll();
            int xx = node.x;
            int yy = node.y;
            
            
            for(int i=0;i<4;i++){
                    int xx_move = xx+x_move[i];
                    int yy_move = yy+y_move[i];
                    if(xx_move > x_idx || xx_move < 0 || yy_move > y_idx || yy_move < 0) 
                    {
                        continue;
                    }
                    if(maps[xx_move][yy_move] == 1 && visit[xx_move][yy_move] == 0) 
                    {
                            q.add(new Node(xx_move,yy_move));
                            visit[xx_move][yy_move] = visit[xx][yy] + 1;
                    }
                }
        }
        
    }
    
}
