import java.util.*;

class Solution {
    static class Node{
        long x;
        long y;
        public Node(long x , long y){
            this.x = x;
            this.y = y;
        } 
    }
    
    static ArrayList<Node> arr  = new ArrayList<>();
    static long x_max = Long.MIN_VALUE;
    static long x_min = Long.MAX_VALUE;
    static long y_max = Long.MIN_VALUE;
    static long y_min = Long.MAX_VALUE;
    public String[] solution(int[][] line) {
    
        check(line);
        
        int y_idx = (int)(y_max - y_min + 1);
        int x_idx = (int)(x_max - x_min + 1);
        
        char[][] point = new char[y_idx][x_idx];
        
        for(int i =0;i<y_idx;i++){
            for(int j =0;j<x_idx;j++){
                
                point[i][j] = '.';    
                
            }    
        }
        
        for(int i =0;i<arr.size();i++){
            Node n = arr.get(i);
            int x = (int)(n.x - x_min);
            int y = (int)(y_max - n.y);
            point[y][x] = '*';
        }
        
        
        String[] answer = new String[point.length];
        
        for(int i=0;i<answer.length;i++){
            answer[i] = new String(point[i]);
        }
        
        return answer;
    }
    
    static void check(int[][] line){
        for(int i=0;i<line.length-1;i++){
            for(int j=i+1;j<line.length;j++){
                cal(line[i],line[j]);
            }
        }
    }
    
    static void cal(int[] prev ,int[] post){
        
        if((long)prev[0]*(long)post[1] - (long)prev[1]*(long)post[0] != 0){
        double x = (double) ((long)prev[1]*(long)post[2] - (long)prev[2]*(long)post[1]) / ((long)prev[0]*(long)post[1] - (long)prev[1]*(long)post[0]);
        double y = (double) ((long)prev[2]*(long)post[0] - (long)prev[0]*(long)post[2]) / ((long)prev[0]*(long)post[1] - (long)prev[1]*(long)post[0]);
        
        
        if(x % 1 ==0 && y % 1 ==0) {
            if(x > x_max) x_max = (long)x;
            if(x < x_min) x_min = (long)x;
            if(y > y_max) y_max = (long)y;
            if(y < y_min) y_min = (long)y;
            
            arr.add(new Node((long)x,(long)y));
        }
        }
        
    }
}
