import java.util.*;
import java.util.Map.*;

class Solution {
    private static HashMap<String,Integer> map;
    
    private void dfs(String seq,StringBuilder sb,int cnt,int idx,int depth){
        if(cnt == depth){
            map.put(sb.toString(),map.getOrDefault(sb.toString(),0)+1);
            return;
        }
        for(int i=idx;i<seq.length();i++){
            sb.append(seq.charAt(i));
            dfs(seq,sb,cnt+1,i+1,depth);
            sb.delete(cnt,cnt+1);
        }
    }
    
    public ArrayList<String> solution(String[] orders, int[] course) {
        ArrayList<String> answer = new ArrayList<>();
    
        
        for(int i=0;i<orders.length;i++){
            char[] cha = orders[i].toCharArray();
            Arrays.sort(cha);
            orders[i] = String.valueOf(cha);
        }
        
        
        for(int i=0;i<course.length;i++){
            map = new HashMap<>();
            int max = Integer.MIN_VALUE;
            
            for(int j=0;j<orders.length;j++){
                if(course[i] <= orders[j].length()){
                    StringBuilder sb = new StringBuilder();
                    dfs(orders[j],sb,0,0,course[i]);
                }
            }
                for(Entry<String,Integer> entry : map.entrySet()){
                    max = Math.max(max,entry.getValue());
                }
                
                if(max < 2) continue;
                
                for(Entry<String,Integer> entry : map.entrySet()){
                    if(entry.getValue() == max){
                        answer.add(entry.getKey());
                    }
                }
                
            }
        
        Collections.sort(answer);  
        return answer;
    }
}
